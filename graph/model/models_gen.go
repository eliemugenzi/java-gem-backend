// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"

	"gorm.io/gorm"
)

type CoffeeResponse interface {
	IsCoffeeResponse()
}

type AuthPayload struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type Coffee struct {
	gorm.Model
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
	UserId string `json:"userId"`
	CreatedBy   *User   `json:"createdBy" gorm:"foreignKey:UserId"`
	CreatedAt   string  `json:"createdAt"`
	UpdatedAt   string  `json:"updatedAt"`
}

func (Coffee) IsCoffeeResponse() {}

type CreateCoffeeInput struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
}

type Mutation struct {
}

type Query struct {
}

type User struct {
	gorm.Model
	ID        string   `json:"id"`
	FirstName string   `json:"firstName" validate:"required,min=3,max=30"`
	LastName  string   `json:"lastName" validate:"required,min=3,max=30"`
	Email     string   `json:"email" validate:"required,email"`
	Password  string   `json:"password" validate:"required,min=8,containsany=!@#$%^&*"`
	Role      UserRole `json:"role"`
	CreatedAt string   `json:"createdAt"`
	UpdatedAt string   `json:"updatedAt"`
}

type ValidationError struct {
	Field   string `json:"field"`
	Message string `json:"message"`
}

func (ValidationError) IsCoffeeResponse() {}

type UserRole string

const (
	UserRoleAdmin UserRole = "ADMIN"
	UserRoleUser  UserRole = "USER"
)

var AllUserRole = []UserRole{
	UserRoleAdmin,
	UserRoleUser,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleAdmin, UserRoleUser:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
