package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	// "errors"
	"fmt"
	models "java-gem/graph/model"
	// "time"
)

// // SignUp is the resolver for the signUp field.
// func (r *mutationResolver) SignUp(ctx context.Context, firstName string, lastName string, email string, password string, role models.UserRole) (*models.AuthPayload, error) {
// 	for _, user := range users {
// 		if user.Email == email {
// 			return nil, errors.New("email already exists")
// 		}
// 	}

// 	newUser := models.User{
// 		ID:        uuid.New().String(),
// 		FirstName: firstName,
// 		LastName:  lastName,
// 		Email:     email,
// 		CreatedAt: time.Now().Format(time.RFC3339),
// 		UpdatedAt: time.Now().Format(time.RFC3339),
// 		Password:  utils.HashPassword([]byte(password)),
// 		Role:      "ADMIN",
// 	}

// 	DB.Create(&newUser)

// 	tokenPair := utils.GenerateTokenPair(newUser.ID)
// 	return &models.AuthPayload{
// 		Token: tokenPair["accessToken"],
// 		User:  &newUser,
// 	}, nil
// }

// // Login is the resolver for the login field.
// func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*models.AuthPayload, error) {
// 	foundUser := models.User{}
// 	fmt.Println("User email: " + email)
// 	userResult := DB.Where("email = ?", email).First(&foundUser)

// 	fmt.Println(userResult)

// 	if userResult.Error != nil {
// 		return nil, errors.New("Invalid credentials")
// 	}

// 	if !utils.ComparePassword(foundUser.Password, []byte(password)) {
// 		return nil, errors.New("Invalid credentials")
// 	}

// 	tokenPair := utils.GenerateTokenPair(foundUser.ID)

// 	return &models.AuthPayload{
// 		Token: tokenPair["accessToken"],
// 		User:  &foundUser,
// 	}, nil
// }

// // CreateCoffee is the resolver for the createCoffee field.
// func (r *mutationResolver) CreateCoffee(ctx context.Context, name string, description string, price float64) (*models.Coffee, error) {
// 	panic(fmt.Errorf("not implemented: CreateCoffee - createCoffee"))
// }

// CurrentUser is the resolver for the currentUser field.
func (r *queryResolver) CurrentUser(ctx context.Context) (*models.User, error) {
	panic(fmt.Errorf("not implemented: CurrentUser - currentUser"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
